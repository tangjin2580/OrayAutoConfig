name: Build .exe with PyInstaller and Create Release

on:
  push:
    branches:
      - master 
  pull_request:
    branches:
      - master 
  workflow_dispatch: 

permissions:
  contents: write 

jobs:
  build-exe:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x' 

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Build .exe
      run: pyinstaller --onefile --add-data "./picture/icon.png;." main.py --name OrayAutoConfig

    - name: Get current version
      id: get_version
      shell: pwsh
      run: |
        # 确保当前路径是一个 Git 仓库
        if (-not (Test-Path .git)) {
            Write-Host "当前目录不是有效的 Git 仓库"
            exit 1
        }

        # 获取标签
        Write-Host "检索当前所有有效版本标签..."
        $tags = git tag | Where-Object {$_ -match '^v[0-9]+\.[0-9]+\.[0-9]+$'}

        if ($tags.Count -eq 0) {
            Write-Host "没有找到有效的版本标签，默认使用 v1.0.0"
            $latestVersion = "v1.0.0"
        } else {
            # 使用自定义对象存储标签及其版本部分
            $tagVersions = @()
            foreach ($tag in $tags) {
                # 删除前缀 v 并拆分版本号
                $versionParts = $tag.TrimStart('v') -split '\.'
                if ($versionParts.Length -eq 3) {
                    $tagVersions += [PSCustomObject]@{
                        OriginalTag = $tag
                        Major = [int]$versionParts[0]
                        Minor = [int]$versionParts[#citation-1](citation-1)
                        Patch = [int]$versionParts[#citation-2](citation-2)
                    }
                }
            }

            # 获取最新版本标签
            $latestVersion = $tagVersions | Sort-Object Major, Minor, Patch | Select-Object -Last 1 -ExpandProperty OriginalTag
        }

        Write-Host "最新版本标签是: $latestVersion"
        # 使用环境变量保存新的版本号
        $new_version_suffix = ($latestVersion -replace 'v', '') -split '\.' | Select-Object -Last 1
        $new_version = "v$($latestVersion.TrimStart('v').Split('.')[0]).$($latestVersion.TrimStart('v').Split('.')[#citation-1](citation-1)).$([int]$new_version_suffix + 1)"
        Write-Host "new_version=$new_version" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.new_version }}  # 使用新生成的版本号
        release_name: Release ${{ env.new_version }}
        draft: false
        prerelease: false

    - name: Upload .exe
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/OrayAutoConfig.exe  
        asset_name: OrayAutoConfig.exe
        asset_content_type: application/octet-stream
