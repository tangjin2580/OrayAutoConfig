name: Build .exe with PyInstaller and Create Release

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-exe:
    runs-on: windows-latest  # 保持使用 Windows 环境

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Build .exe
      run: pyinstaller --onefile --add-data "./picture/icon.png;." main.py --name OrayAutoConfig

    - name: Get current version
      id: get_version
      shell: pwsh
      run: |
        # 从远程仓库获取所有标签
        $tags = git ls-remote --tags https://github.com/tangjin2580/OrayAutoConfig.git
        $tagVersions = @()

        # 筛选并处理标签
        foreach ($tag in $tags) {
            if ($tag -match 'refs/tags/v([0-9]+)\.([0-9]+)\.([0-9]+)') {
                $tagVersions += [PSCustomObject]@{
                    OriginalTag = $matches[0]
                    Major = [int]$matches[#citation-1](citation-1)  # 使用正确的索引
                    Minor = [int]$matches[#citation-2](citation-2)
                    Patch = [int]$matches[#citation-3](citation-3)
                }
            }
        }

        # 获取最新版本标签
        $latestVersion = $tagVersions | Sort-Object Major, Minor, Patch | Select-Object -Last 1
        
        # 如果没有找到版本号，默认为 v1.0.0
        if (-not $latestVersion) {
            $latestVersion = [PSCustomObject]@{
                OriginalTag = 'v1.0.0'
                Major = 1
                Minor = 0
                Patch = 0
            }
        }
        
        # 生成新的版本号
        $new_version_suffix = $latestVersion.Patch + 1
        $new_version = "v$($latestVersion.Major).$($latestVersion.Minor).$new_version_suffix"

        Write-Host "new_version=$new_version" | Out-File -FilePath $env:GITHUB_ENV -Append
        Write-Host "生成的新版本号: $new_version"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.new_version }}  # 使用新生成的版本号
        release_name: Release ${{ env.new_version }}
        draft: false
        prerelease: false

    - name: Upload .exe
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/OrayAutoConfig.exe
        asset_name: OrayAutoConfig.exe
        asset_content_type: application/octet-stream
